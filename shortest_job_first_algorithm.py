# -*- coding: utf-8 -*-
"""Shortest Job First Algorithm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ArTKX4owRHWE5HTaLpG1XkE4IM70Uk3a
"""

n = int(input("Enter number of processes: "))
processes = []

for i in range(n):
    pid = "P" + str(i + 1)
    arrival = int(input(f"Enter arrival time for {pid}: "))
    burst = int(input(f"Enter burst time for {pid}: "))
    processes.append([pid, arrival, burst, False])

time = 0
done = 0
results = []
total_waiting = 0

print("\nPID\tAT\tBT\tCT\tTAT\tWT")

while done < n:
    ready_queue = []

    for p in processes:
        if p[1] <= time and p[3] == False:
            ready_queue.append(p)

    if len(ready_queue) > 0:
        current_process = ready_queue[0]


        for p in ready_queue:
            if p[2] < current_process[2]:
                current_process = p

        pid = current_process[0]
        arrival = current_process[1]
        burst = current_process[2]

        completion = time + burst
        turnaround = completion - arrival
        waiting = turnaround - burst

        results.append([pid, arrival, burst, completion, turnaround, waiting])
        total_waiting += waiting


        for p in processes:
            if p[0] == pid:
                p[3] = True
                break

        time = completion
        done += 1
    else:
        time += 1


for r in results:
    print(f"{r[0]}\t{r[1]}\t{r[2]}\t{r[3]}\t{r[4]}\t{r[5]}")

average_wait = total_waiting / n
print(f"\nAverage Waiting Time: {average_wait:.2f}")